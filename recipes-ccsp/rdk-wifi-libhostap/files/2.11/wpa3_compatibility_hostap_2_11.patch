##########################################
Date: Feb 28 20:30:11 2025
From: Amalesh_Nandh@comcast.com
Subject: [PATCH] RSN Override for WPA3 Compatibility 2.11
Source: Comcast
##########################################

diff --git a/source/hostap-2.11/src/ap/ap_config.c b/source/hostap-2.11/src/ap/ap_config.c
index cbb45af49..5908f07c4 100644
--- a/source/hostap-2.11/src/ap/ap_config.c
+++ b/source/hostap-2.11/src/ap/ap_config.c
@@ -498,8 +498,9 @@ int hostapd_setup_sae_pt(struct hostapd_bss_config *conf)
 	     !wpa_key_mgmt_sae_ext_key(conf->wpa_key_mgmt) &&
 	     !hostapd_sae_pk_in_use(conf)) ||
 	    conf->sae_pwe == SAE_PWE_FORCE_HUNT_AND_PECK ||
-	    !wpa_key_mgmt_sae(conf->wpa_key_mgmt))
-		return 0; /* PT not needed */
+	    !(wpa_key_mgmt_sae(conf->wpa_key_mgmt) ||
+		  wpa_key_mgmt_sae(conf->wpa_key_mgmt_rsno)))
+			return 0; /* PT not needed */
 
 	sae_deinit_pt(ssid->pt);
 	ssid->pt = NULL;
diff --git a/source/hostap-2.11/src/ap/ap_config.h b/source/hostap-2.11/src/ap/ap_config.h
index 93b9b8a31..150508c67 100644
--- a/source/hostap-2.11/src/ap/ap_config.h
+++ b/source/hostap-2.11/src/ap/ap_config.h
@@ -999,6 +999,8 @@ struct hostapd_bss_config {
 #endif /* CONFIG_IEEE80211BE */
 
 	int connected_building_avp;
+	int wpa_key_mgmt_rsno;
+	enum mfp_options ieee80211w_rsno;
 };
 
 /**
diff --git a/source/hostap-2.11/src/ap/beacon.c b/source/hostap-2.11/src/ap/beacon.c
index 33d518834..7790a66bd 100644
--- a/source/hostap-2.11/src/ap/beacon.c
+++ b/source/hostap-2.11/src/ap/beacon.c
@@ -418,6 +418,38 @@ static u8 * hostapd_get_wpa_ie(struct hostapd_data *hapd, u8 *pos, size_t len)
 	return pos + 2 + ie[1];
 }
 
+static u8 * hostapd_eid_rsno_ie(struct hostapd_data *hapd, u8 *pos, size_t len)
+{
+	const u8 *ie;
+
+	ie = hostapd_vendor_wpa_ie(hapd, WPA_RSNO_OUI_TYPE);
+       if (!ie || 2U + ie[1] > len)
+	{
+		wpa_printf(MSG_ERROR, "%s IE not found in hostapd_vendor_wpa_ie \n", __func__);
+		return pos;
+	}
+
+	os_memcpy(pos, ie, 2 + ie[1]);
+
+	return pos + 2 + ie[1];
+}
+
+static u8 * hostapd_eid_rsnxo_ie(struct hostapd_data *hapd, u8 *pos, size_t len)
+{
+	const u8 *ie;
+
+	ie = hostapd_vendor_wpa_ie(hapd, WPA_RSNXO_OUI_TYPE);
+	if (!ie || 2U + ie[1] > len) {
+		wpa_printf(MSG_ERROR, "%s Error in hostapd_vendor_wpa_ie\n", __func__);
+		return pos;
+	}
+
+	os_memcpy(pos, ie, 2 + ie[1]);
+
+	return pos + 2 + ie[1];
+}
+
+
 
 static u8 * hostapd_get_osen_ie(struct hostapd_data *hapd, u8 *pos, size_t len)
 {
@@ -976,6 +1008,10 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 		pos += wpabuf_len(hapd->conf->vendor_elements);
 	}
 
+	if(hapd->conf->wpa_key_mgmt_rsno) {
+		pos = hostapd_eid_rsno_ie(hapd, pos, epos - pos);
+		pos = hostapd_eid_rsnxo_ie(hapd, pos, epos - pos);
+	}
 #ifdef CONFIG_TESTING_OPTIONS
 	if (hapd->conf->presp_elements) {
 		os_memcpy(pos, wpabuf_head(hapd->conf->presp_elements),
@@ -2488,6 +2524,11 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 		tailpos += wpabuf_len(hapd->conf->vendor_elements);
 	}
 
+	if(hapd->conf->wpa_key_mgmt_rsno) {
+		tailpos = hostapd_eid_rsno_ie(hapd, tailpos, tail + tail_len - tailpos);
+		tailpos = hostapd_eid_rsnxo_ie(hapd, tailpos, tail + tail_len - tailpos);
+	}
+
 	tail_len = tailpos > tail ? tailpos - tail : 0;
 
 	resp = hostapd_probe_resp_offloads(hapd, &resp_len);
diff --git a/source/hostap-2.11/src/ap/ieee802_11.c b/source/hostap-2.11/src/ap/ieee802_11.c
index d0aa6601a..a21ca470a 100644
--- a/source/hostap-2.11/src/ap/ieee802_11.c
+++ b/source/hostap-2.11/src/ap/ieee802_11.c
@@ -2995,7 +2995,8 @@ static void handle_auth(struct hostapd_data *hapd,
 	       auth_alg == WLAN_AUTH_FT) ||
 #endif /* CONFIG_IEEE80211R_AP */
 #ifdef CONFIG_SAE
-	      (hapd->conf->wpa && wpa_key_mgmt_sae(hapd->conf->wpa_key_mgmt) &&
+		  ( ((hapd->conf->wpa && wpa_key_mgmt_sae(hapd->conf->wpa_key_mgmt)) ||
+			(hapd->conf->wpa && wpa_key_mgmt_sae(hapd->conf->wpa_key_mgmt_rsno))) &&
 	       auth_alg == WLAN_AUTH_SAE) ||
 #endif /* CONFIG_SAE */
 #ifdef CONFIG_FILS
diff --git a/source/hostap-2.11/src/ap/wpa_auth.h b/source/hostap-2.11/src/ap/wpa_auth.h
index 0383e0b44..0d2b959c3 100644
--- a/source/hostap-2.11/src/ap/wpa_auth.h
+++ b/source/hostap-2.11/src/ap/wpa_auth.h
@@ -275,7 +275,8 @@ struct wpa_auth_config {
 #ifdef CONFIG_DRIVER_BRCM
 	int spp_amsdu;
 #endif /* CONFIG_DRIVER_BRCM */
-
+	int wpa_key_mgmt_rsno;
+	enum mfp_options ieee80211w_rsno;
 	/*
 	 * If set Key Derivation Key should be derived as part of PMK to
 	 * PTK derivation regardless of advertised capabilities.
diff --git a/source/hostap-2.11/src/ap/wpa_auth_glue.c b/source/hostap-2.11/src/ap/wpa_auth_glue.c
index 2caa232c6..a120ea932 100644
--- a/source/hostap-2.11/src/ap/wpa_auth_glue.c
+++ b/source/hostap-2.11/src/ap/wpa_auth_glue.c
@@ -231,6 +231,8 @@ static void hostapd_wpa_auth_conf(struct hostapd_bss_config *conf,
 	wconf->no_disconnect_on_group_keyerror =
 		conf->bss_max_idle && conf->ap_max_inactivity &&
 		conf->no_disconnect_on_group_keyerror;
+	wconf->wpa_key_mgmt_rsno = conf->wpa_key_mgmt_rsno;
+	wconf->ieee80211w_rsno = conf->ieee80211w_rsno;
 }
 
 
diff --git a/source/hostap-2.11/src/ap/wpa_auth_ie.c b/source/hostap-2.11/src/ap/wpa_auth_ie.c
index 112ba8119..e7037b914 100644
--- a/source/hostap-2.11/src/ap/wpa_auth_ie.c
+++ b/source/hostap-2.11/src/ap/wpa_auth_ie.c
@@ -513,6 +513,265 @@ static u8 * wpa_write_osen(struct wpa_auth_config *conf, u8 *eid)
 	return eid;
 }
 
+static u16 wpa_own_rsno_capab(struct wpa_auth_config *conf)
+{
+	u16 capab = 0;
+
+	if (conf->rsn_preauth)
+		capab |= WPA_CAPABILITY_PREAUTH;
+	if (conf->wmm_enabled) {
+		/* 4 PTKSA replay counters when using WMM */
+		capab |= (RSN_NUM_REPLAY_COUNTERS_16 << 2);
+	}
+	if (conf->ieee80211w_rsno != NO_MGMT_FRAME_PROTECTION) {
+		capab |= WPA_CAPABILITY_MFPC;
+		if (conf->ieee80211w_rsno == MGMT_FRAME_PROTECTION_REQUIRED)
+			capab |= WPA_CAPABILITY_MFPR;
+	}
+#ifdef CONFIG_DRIVER_BRCM
+	if (conf->spp_amsdu != 0) {
+		capab |= WPA_CAPABILITY_SPP_A_MSDU_CAPABLE;
+		if (conf->spp_amsdu == 2) {
+			capab |= WPA_CAPABILITY_SPP_A_MSDU_REQUIRED;
+		}
+	}
+#endif /* CONFIG_DRIVER_BRCM */
+#ifdef CONFIG_OCV
+	if (conf->ocv)
+		capab |= WPA_CAPABILITY_OCVC;
+#endif /* CONFIG_OCV */
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing)
+		capab |= BIT(8) | BIT(15);
+#endif /* CONFIG_RSN_TESTING */
+	if (conf->extended_key_id)
+		capab |= WPA_CAPABILITY_EXT_KEY_ID_FOR_UNICAST;
+
+	return capab;
+}
+
+int wpa_write_rsno_ie(struct wpa_auth_config *conf, u8 *buf, size_t len,
+		     const u8 *pmkid)
+{
+	struct rsno_ie_hdr *hdr;
+	int num_suites, res;
+	u8 *pos, *count;
+	u32 suite;
+
+	hdr = (struct rsno_ie_hdr *) buf;
+	hdr->elem_id = WLAN_EID_VENDOR_SPECIFIC;
+	WPA_PUT_BE32(hdr->oui, WPA_RSNO_OUI_TYPE);
+	WPA_PUT_LE16(hdr->version, RSN_VERSION);
+	pos = (u8 *) (hdr + 1);
+
+	suite = wpa_cipher_to_suite(WPA_PROTO_RSN, conf->wpa_group);
+	if (suite == 0) {
+		wpa_printf(MSG_DEBUG, "Invalid group cipher (%d).",
+				conf->wpa_group);
+		return -1;
+	}
+	RSN_SELECTOR_PUT(pos, suite);
+	pos += RSN_SELECTOR_LEN;
+
+	num_suites = 0;
+	count = pos;
+	pos += 2;
+
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing) {
+		RSN_SELECTOR_PUT(pos, RSN_SELECTOR(0x12, 0x34, 0x56, 1));
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+#endif /* CONFIG_RSN_TESTING */
+
+	res = rsn_cipher_put_suites(pos, conf->rsn_pairwise);
+	num_suites += res;
+	pos += res * RSN_SELECTOR_LEN;
+
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing) {
+		RSN_SELECTOR_PUT(pos, RSN_SELECTOR(0x12, 0x34, 0x56, 2));
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+#endif /* CONFIG_RSN_TESTING */
+
+	if (num_suites == 0) {
+		wpa_printf(MSG_DEBUG, "Invalid pairwise cipher (%d).",
+			   conf->rsn_pairwise);
+		return -1;
+	}
+	WPA_PUT_LE16(count, num_suites);
+
+	num_suites = 0;
+	count = pos;
+	pos += 2;
+
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing) {
+		RSN_SELECTOR_PUT(pos, RSN_SELECTOR(0x12, 0x34, 0x56, 1));
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+#endif /* CONFIG_RSN_TESTING */
+
+#ifdef CONFIG_SAE
+	if (conf->wpa_key_mgmt_rsno & WPA_KEY_MGMT_SAE) {
+		RSN_SELECTOR_PUT(pos, RSN_AUTH_KEY_MGMT_SAE);
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+	if (conf->wpa_key_mgmt_rsno & WPA_KEY_MGMT_SAE_EXT_KEY) {
+		RSN_SELECTOR_PUT(pos, RSN_AUTH_KEY_MGMT_SAE_EXT_KEY);
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+#endif /* CONFIG_SAE */
+
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing) {
+		RSN_SELECTOR_PUT(pos, RSN_SELECTOR(0x12, 0x34, 0x56, 2));
+		pos += RSN_SELECTOR_LEN;
+		num_suites++;
+	}
+#endif /* CONFIG_RSN_TESTING */
+
+	if (num_suites == 0) {
+		wpa_printf(MSG_DEBUG, "Invalid key management type (%d).",
+			   conf->wpa_key_mgmt);
+		return -1;
+	}
+	WPA_PUT_LE16(count, num_suites);
+
+	/* RSN Capabilities */
+	WPA_PUT_LE16(pos, wpa_own_rsno_capab(conf));
+	pos += 2;
+
+	if (pmkid) {
+		if (2 + PMKID_LEN > buf + len - pos)
+			return -1;
+		/* PMKID Count */
+		WPA_PUT_LE16(pos, 1);
+		pos += 2;
+		os_memcpy(pos, pmkid, PMKID_LEN);
+		pos += PMKID_LEN;
+	}
+
+	if (conf->ieee80211w_rsno != NO_MGMT_FRAME_PROTECTION &&
+	    conf->group_mgmt_cipher != WPA_CIPHER_AES_128_CMAC) {
+		if (2 + 4 > buf + len - pos)
+			return -1;
+		if (pmkid == NULL) {
+			/* PMKID Count */
+			WPA_PUT_LE16(pos, 0);
+			pos += 2;
+		}
+
+		/* Management Group Cipher Suite */
+		switch (conf->group_mgmt_cipher) {
+		case WPA_CIPHER_AES_128_CMAC:
+			RSN_SELECTOR_PUT(pos, RSN_CIPHER_SUITE_AES_128_CMAC);
+			break;
+		case WPA_CIPHER_BIP_GMAC_128:
+			RSN_SELECTOR_PUT(pos, RSN_CIPHER_SUITE_BIP_GMAC_128);
+			break;
+		case WPA_CIPHER_BIP_GMAC_256:
+			RSN_SELECTOR_PUT(pos, RSN_CIPHER_SUITE_BIP_GMAC_256);
+			break;
+		case WPA_CIPHER_BIP_CMAC_256:
+			RSN_SELECTOR_PUT(pos, RSN_CIPHER_SUITE_BIP_CMAC_256);
+			break;
+		default:
+			wpa_printf(MSG_DEBUG,
+				   "Invalid group management cipher (0x%x)",
+				   conf->group_mgmt_cipher);
+			return -1;
+		}
+		pos += RSN_SELECTOR_LEN;
+	}
+
+#ifdef CONFIG_RSN_TESTING
+	if (rsn_testing) {
+		/*
+		 * Fill in any defined fields and add extra data to the end of
+		 * the element.
+		 */
+		int pmkid_count_set = pmkid != NULL;
+		if (conf->ieee80211w_rsno != NO_MGMT_FRAME_PROTECTION)
+			pmkid_count_set = 1;
+		/* PMKID Count */
+		WPA_PUT_LE16(pos, 0);
+		pos += 2;
+		if (conf->ieee80211w_rsno == NO_MGMT_FRAME_PROTECTION) {
+			/* Management Group Cipher Suite */
+			RSN_SELECTOR_PUT(pos, RSN_CIPHER_SUITE_AES_128_CMAC);
+			pos += RSN_SELECTOR_LEN;
+		}
+
+		os_memset(pos, 0x12, 17);
+		pos += 17;
+	}
+#endif /* CONFIG_RSN_TESTING */
+
+	hdr->len = (pos - buf) - 2;
+
+	return pos - buf;
+}
+
+int wpa_write_rsnxo_ie(struct wpa_auth_config *conf, u8 *buf, size_t len)
+{
+	struct rsnxo_ie_hdr *hdr = (struct rsnxo_ie_hdr *) buf;
+	u8 *pos = buf;
+	u32 capab = 0, tmp;
+	size_t flen;
+
+	hdr->elem_id = WLAN_EID_VENDOR_SPECIFIC;
+	WPA_PUT_BE32(hdr->oui, WPA_RSNXO_OUI_TYPE);
+
+	pos = (u8 *) (hdr + 1);
+	if (wpa_key_mgmt_sae(conf->wpa_key_mgmt_rsno) &&
+	    (conf->sae_pwe == SAE_PWE_HASH_TO_ELEMENT ||
+	     conf->sae_pwe == SAE_PWE_BOTH || conf->sae_pk ||
+	     wpa_key_mgmt_sae_ext_key(conf->wpa_key_mgmt))) {
+		capab |= BIT(WLAN_RSNX_CAPAB_SAE_H2E);
+#ifdef CONFIG_SAE_PK
+		if (conf->sae_pk)
+			capab |= BIT(WLAN_RSNX_CAPAB_SAE_PK);
+#endif /* CONFIG_SAE_PK */
+	}
+
+	if (conf->secure_ltf)
+		capab |= BIT(WLAN_RSNX_CAPAB_SECURE_LTF);
+	if (conf->secure_rtt)
+		capab |= BIT(WLAN_RSNX_CAPAB_SECURE_RTT);
+	if (conf->prot_range_neg)
+		capab |= BIT(WLAN_RSNX_CAPAB_URNM_MFPR);
+	if (conf->ssid_protection)
+		capab |= BIT(WLAN_RSNX_CAPAB_SSID_PROTECTION);
+
+	if (!capab)
+		return 0; /* no supported extended RSN capabilities */
+	tmp = capab;
+
+	flen = 0;
+	while (tmp) {
+		flen++;
+		tmp >>= 8;
+	}
+	if (len < 2 + flen)
+		return -1;
+	capab |= flen - 1; /* bit 0-3 = Field length (n - 1) */
+
+	while (capab) {
+		*pos++ = capab & 0xff;
+		capab >>= 8;
+	}
+	hdr->len = pos - buf - 2;
+
+	return pos - buf;
+}
+
 
 int wpa_auth_gen_wpa_ie(struct wpa_authenticator *wpa_auth)
 {
@@ -553,11 +812,29 @@ int wpa_auth_gen_wpa_ie(struct wpa_authenticator *wpa_auth)
 		if (res < 0)
 			return res;
 		pos += res;
-		res = wpa_write_rsnxe(&wpa_auth->conf, pos,
-				      buf + sizeof(buf) - pos);
-		if (res < 0)
-			return res;
-		pos += res;
+
+		if(wpa_auth->conf.wpa_key_mgmt_rsno) {
+			res = wpa_write_rsno_ie(&wpa_auth->conf,
+						pos, buf + sizeof(buf) - pos, NULL);
+			if (res < 0)
+				return res;
+			pos += res;
+		}
+
+		if( wpa_key_mgmt_sae(wpa_auth->conf.wpa_key_mgmt) ) {
+			res = wpa_write_rsnxe(&wpa_auth->conf, pos,
+						buf + sizeof(buf) - pos);
+			if (res < 0)
+				return res;
+			pos += res;
+		}
+
+		if( wpa_key_mgmt_sae(wpa_auth->conf.wpa_key_mgmt_rsno) ) {
+			res = wpa_write_rsnxo_ie(&wpa_auth->conf, pos,
+						buf + sizeof(buf) - pos);
+			if(res < 0) return res;
+			pos += res;
+		}
 	}
 #ifdef CONFIG_IEEE80211R_AP
 	if (wpa_key_mgmt_ft(wpa_auth->conf.wpa_key_mgmt)) {
@@ -804,7 +1081,7 @@ wpa_validate_wpa_ie(struct wpa_authenticator *wpa_auth,
 		return WPA_INVALID_GROUP;
 	}
 
-	key_mgmt = data.key_mgmt & wpa_auth->conf.wpa_key_mgmt;
+	key_mgmt = (data.key_mgmt & wpa_auth->conf.wpa_key_mgmt) | (data.key_mgmt & wpa_auth->conf.wpa_key_mgmt_rsno);
 	if (!key_mgmt) {
 		wpa_printf(MSG_DEBUG, "Invalid WPA key mgmt (0x%x) from "
 			   MACSTR, data.key_mgmt, MAC2STR(sm->addr));
diff --git a/source/hostap-2.11/src/common/wpa_common.h b/source/hostap-2.11/src/common/wpa_common.h
index abc64c7cb..a8d83915f 100644
--- a/source/hostap-2.11/src/common/wpa_common.h
+++ b/source/hostap-2.11/src/common/wpa_common.h
@@ -149,6 +149,8 @@ WPA_CIPHER_BIP_CMAC_256)
 #define WFA_KEY_DATA_DPP RSN_SELECTOR(0x50, 0x6f, 0x9a, 0x21)
 
 #define WPA_OUI_TYPE RSN_SELECTOR(0x00, 0x50, 0xf2, 1)
+#define WPA_RSNO_OUI_TYPE RSN_SELECTOR(0x50, 0x6f, 0x9a, 0x29)
+#define WPA_RSNXO_OUI_TYPE RSN_SELECTOR(0x50, 0x6f, 0x9a, 0x2B)
 
 #define RSN_SELECTOR_PUT(a, val) WPA_PUT_BE32((u8 *) (a), (val))
 #define RSN_SELECTOR_GET(a) WPA_GET_BE32((const u8 *) (a))
@@ -790,4 +792,19 @@ int wpa_pasn_parse_parameter_ie(const u8 *data, u8 len, bool from_ap,
 void wpa_pasn_add_rsnxe(struct wpabuf *buf, u16 capab);
 int wpa_pasn_add_extra_ies(struct wpabuf *buf, const u8 *extra_ies, size_t len);
 
+struct rsno_ie_hdr {
+	u8 elem_id;
+	u8 len;
+	u8 oui[3];
+	u8 oui_type;
+	u8 version[2]; /* little endian */
+}STRUCT_PACKED;
+
+struct rsnxo_ie_hdr {
+	u8 elem_id;
+	u8 len;
+	u8 oui[3];
+	u8 oui_type;
+}STRUCT_PACKED;
+
 #endif /* WPA_COMMON_H */
