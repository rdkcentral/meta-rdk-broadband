##########################################
From 150ee0c06858824246b94e0b6dd34ec0d6fc77d1 Mon Sep 17 00:00:00 2001
From: Ilan Peer <ilan.peer@intel.com>
Date: Fri, 22 Dec 2023 11:04:22 +0200
Subject: [PATCH] AP: Add an additional TPE element when needed
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

If the regulatory client EIRP PSD values advertised by an AP that is a
standard power AP or indoor standard power AP are insufficient to ensure
that regulatory client limits on total EIRP are always met for all
transmission bandwidths within the bandwidth of the AP’s BSS, the AP
shall also send a TPE element in Beacon and Probe Response frames as
that depicts the regulatory client EIRP limit.

Add support for this.

Signed-off-by: Ilan Peer <ilan.peer@intel.com>

Backport to 2.10 from 2.11
Align IEs to BCM driver
##########################################
diff --git a/source/hostap-2.10/hostapd/config_file.c b/source/hostap-2.10/hostapd/config_file.c
index 03a3047..f616e3d 100644
--- a/source/hostap-2.10/hostapd/config_file.c
+++ b/source/hostap-2.10/hostapd/config_file.c
@@ -3621,6 +3621,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		}
 	} else if (os_strcmp(buf, "he_6ghz_reg_pwr_type") == 0) {
 		conf->he_6ghz_reg_pwr_type = atoi(pos);
+	} else if (os_strcmp(buf, "reg_def_cli_eirp") == 0) {
+		conf->reg_def_cli_eirp = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_chwidth") == 0) {
 		conf->he_oper_chwidth = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_centr_freq_seg0_idx") == 0) {
diff --git a/source/hostap-2.10/src/ap/ap_config.c b/source/hostap-2.10/src/ap/ap_config.c
index 175ce17..116f290 100644
--- a/source/hostap-2.10/src/ap/ap_config.c
+++ b/source/hostap-2.10/src/ap/ap_config.c
@@ -279,6 +279,7 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->he_6ghz_max_ampdu_len_exp = 7;
 	conf->he_6ghz_rx_ant_pat = 1;
 	conf->he_6ghz_tx_ant_pat = 1;
+        conf->reg_def_cli_eirp = -1;
 #endif /* CONFIG_IEEE80211AX */
 
 	/* The third octet of the country string uses an ASCII space character
diff --git a/source/hostap-2.10/src/ap/ap_config.h b/source/hostap-2.10/src/ap/ap_config.h
index 50e8dcf..545f442 100644
--- a/source/hostap-2.10/src/ap/ap_config.h
+++ b/source/hostap-2.10/src/ap/ap_config.h
@@ -1123,6 +1123,14 @@ struct hostapd_config {
 	u8 he_6ghz_rx_ant_pat;
 	u8 he_6ghz_tx_ant_pat;
 	u8 he_6ghz_reg_pwr_type;
+	/*
+	 * This value should be used when regulatory client EIRP PSD values
+	 * advertised by an AP that is an SP AP or an indoor SP AP are
+	 * insufficient to ensure that regulatory client limits on total EIRP
+	 * are always met for all transmission bandwidths within the bandwidth
+	 * of the AP’s BSS.
+	 */
+	int reg_def_cli_eirp;
 #endif /* CONFIG_IEEE80211AX */
 
 	/* VHT enable/disable config from CHAN_SWITCH */
diff --git a/source/hostap-2.10/src/ap/beacon.c b/source/hostap-2.10/src/ap/beacon.c
index 1c5cce5..561e70f 100644
--- a/source/hostap-2.10/src/ap/beacon.c
+++ b/source/hostap-2.10/src/ap/beacon.c
@@ -518,6 +518,12 @@ static u8 * hostapd_gen_probe_resp(struct hostapd_data *hapd,
 			if (hapd->iconf->he_6ghz_reg_pwr_type ==
 			    HE_6GHZ_INDOOR_AP)
 				buflen += 4;
+
+			/* An additional Transmit Power Envelope element for
+			 * default client with unit interpretation of regulatory
+			 * client EIRP */
+			if (hapd->iconf->reg_def_cli_eirp != -1)
+				buflen += 4;
 		}
 	}
 #endif /* CONFIG_IEEE80211AX */
@@ -1401,6 +1407,12 @@ static u8 * hostapd_gen_fils_discovery(struct hostapd_data *hapd, size_t *len)
 		total_len += 4;
 		if (hapd->iconf->he_6ghz_reg_pwr_type == HE_6GHZ_INDOOR_AP)
 			total_len += 4;
+
+		/* An additional Transmit Power Envelope element for
+		 * default client with unit interpretation of regulatory
+		 * client EIRP */
+		if (hapd->iconf->reg_def_cli_eirp != -1)
+			total_len += 4;
 	}
 #endif /* CONFIG_IEEE80211AX */
 
@@ -1561,6 +1573,12 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 			if (hapd->iconf->he_6ghz_reg_pwr_type ==
 			    HE_6GHZ_INDOOR_AP)
 				tail_len += 4;
+
+			/* An additional Transmit Power Envelope element for
+			 * default client with unit interpretation of regulatory
+			 * client EIRP */
+			if (hapd->iconf->reg_def_cli_eirp != -1)
+				tail_len += 4;
 		}
 	}
 #endif /* CONFIG_IEEE80211AX */
diff --git a/source/hostap-2.10/src/ap/ieee802_11.c b/source/hostap-2.10/src/ap/ieee802_11.c
index 191d274..047813b 100644
--- a/source/hostap-2.10/src/ap/ieee802_11.c
+++ b/source/hostap-2.10/src/ap/ieee802_11.c
@@ -7030,6 +7030,30 @@ static u8 * hostapd_add_tpe_info(u8 *eid, u8 tx_pwr_count,
 	return eid;
 }
 
+static u8 * hostapd_add_tpe_info_psd(u8 *eid, u8 tx_pwr_count,
+				 enum max_tx_pwr_interpretation tx_pwr_intrpn,
+				 u8 tx_pwr_cat, u8 tx_pwr)
+{
+	unsigned int i;
+
+	*eid++ = WLAN_EID_TRANSMIT_POWER_ENVELOPE; /* Element ID */
+	*eid++ = 1 + (1 << tx_pwr_count); /* Length */
+
+	/*
+	 * Transmit Power Information field
+	 *	bits 0-2 : Maximum Transmit Power Count
+	 *	bits 3-5 : Maximum Transmit Power Interpretation
+	 *	bits 6-7 : Maximum Transmit Power Category
+	 */
+	*eid++ = (tx_pwr_count + 1) | (tx_pwr_intrpn << 3) | (tx_pwr_cat << 6);
+
+	/* Maximum Transmit Power field */
+	for (i = 0; i < (1 << tx_pwr_count); i++)
+		*eid++ = tx_pwr;
+
+	return eid;
+}
+
 
 /*
  * TODO: Extract power limits from channel data after 6G regulatory
@@ -7075,13 +7099,40 @@ u8 * hostapd_eid_txpower_envelope(struct hostapd_data *hapd, u8 *eid)
 	if (is_6ghz_op_class(iconf->op_class)) {
 		enum max_tx_pwr_interpretation tx_pwr_intrpn;
 
-		/* Same Maximum Transmit Power for all 20 MHz bands */
-		tx_pwr_count = 0;
+		switch (hostapd_get_oper_chwidth(iconf)) {
+		case CHANWIDTH_USE_HT:
+			if (iconf->secondary_channel == 0) {
+				/* Max Transmit Power count = 0 (20 MHz) */
+				tx_pwr_count = 0;
+			} else {
+				/* Max Transmit Power count = 1 (20, 40 MHz) */
+				tx_pwr_count = 1;
+			}
+			break;
+		case CHANWIDTH_80MHZ:
+			/* Max Transmit Power count = 2 (20, 40, and 80 MHz) */
+			tx_pwr_count = 2;
+			break;
+		case CHANWIDTH_80P80MHZ:
+		case CHANWIDTH_160MHZ:
+			/* Max Transmit Power count = 3 (20, 40, 80, 160/80+80 MHz) */
+			tx_pwr_count = 3;
+			break;
+		default:
+			return eid;
+		}
+
+		if (iconf->reg_def_cli_eirp != -1)
+			eid = hostapd_add_tpe_info(
+				eid, tx_pwr_count, REGULATORY_CLIENT_EIRP,
+				REG_DEFAULT_CLIENT,
+				hapd->iconf->reg_def_cli_eirp);
+
 		tx_pwr_intrpn = REGULATORY_CLIENT_EIRP_PSD;
 
 		/* Default Transmit Power Envelope for Global Operating Class */
 		tx_pwr = REG_PSD_MAX_TXPOWER_FOR_DEFAULT_CLIENT * 2;
-		eid = hostapd_add_tpe_info(eid, tx_pwr_count, tx_pwr_intrpn,
+		eid = hostapd_add_tpe_info_psd(eid, tx_pwr_count, tx_pwr_intrpn,
 					   REG_DEFAULT_CLIENT, tx_pwr);
 
 		/* Indoor Access Point must include an additional TPE for
@@ -7089,7 +7140,7 @@ u8 * hostapd_eid_txpower_envelope(struct hostapd_data *hapd, u8 *eid)
 		if (iconf->he_6ghz_reg_pwr_type == HE_6GHZ_INDOOR_AP) {
 			/* TODO: Extract PSD limits from channel data */
 			tx_pwr = REG_PSD_MAX_TXPOWER_FOR_SUBORDINATE_CLIENT * 2;
-			eid = hostapd_add_tpe_info(eid, tx_pwr_count,
+			eid = hostapd_add_tpe_info_psd(eid, tx_pwr_count,
 						   tx_pwr_intrpn,
 						   REG_SUBORDINATE_CLIENT,
 						   tx_pwr);
