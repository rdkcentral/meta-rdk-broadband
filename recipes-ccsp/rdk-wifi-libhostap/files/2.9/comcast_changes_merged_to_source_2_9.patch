##########################################
Date: nov 26, 2024 07:12 PM
From: I64048778a48e1d31887b267a013f30b5fdc7c9ee
Subject: changes merged to source of 2.10
Source: COMCAST
License: BSD
Upstream-Status: Pending
Signed-off-by: NarendraVarma Dandu <NarendraVarma_Dandu@comcast.com>
##########################################
--- a/source/hostap-2.9/src/ap/ap_drv_ops.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/ap_drv_ops.c	2024-11-25 17:53:42
@@ -251,7 +251,18 @@ int hostapd_set_ap_wps_ie(struct hostapd_data *hapd)
 	return ret;
 }
 
+#ifdef RDK_ONEWIFI
+int hostapd_drv_wps_event_notify_cb(struct hostapd_data *hapd, enum wps_event event,
+                                    union wps_event_data *data)
+{
+	if (!hapd->driver || !hapd->driver->wps_event_notify_cb || !hapd->drv_priv) {
+		return 0;
+	}
 
+	return hapd->driver->wps_event_notify_cb(hapd->drv_priv, event, (union wps_event_data *)data);
+}
+#endif //RDK_ONEWIFI
+
 int hostapd_set_authorized(struct hostapd_data *hapd,
 			   struct sta_info *sta, int authorized)
 {
@@ -717,6 +728,16 @@ int hostapd_drv_sta_deauth(struct hostapd_data *hapd,
 					reason);
 }
 
+#ifdef RDK_ONEWIFI
+int hostapd_drv_sta_notify_deauth(struct hostapd_data *hapd,
+			   const u8 *addr, int reason)
+{
+	if (!hapd->driver || !hapd->driver->sta_notify_deauth || !hapd->drv_priv)
+		return 0;
+	return hapd->driver->sta_notify_deauth(hapd->drv_priv, hapd->own_addr, addr,
+					reason);
+}
+#endif //RDK_ONEWIFI
 
 int hostapd_drv_sta_disassoc(struct hostapd_data *hapd,
 			     const u8 *addr, int reason)
--- a/source/hostap-2.9/src/ap/ap_drv_ops.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/ap_drv_ops.h	2024-11-25 17:53:42
@@ -26,6 +26,10 @@ int hostapd_set_ap_wps_ie(struct hostapd_data *hapd);
 			       struct wpabuf *assocresp);
 int hostapd_reset_ap_wps_ie(struct hostapd_data *hapd);
 int hostapd_set_ap_wps_ie(struct hostapd_data *hapd);
+#ifdef RDK_ONEWIFI
+int hostapd_drv_wps_event_notify_cb(struct hostapd_data *hapd, enum wps_event event,
+				    union wps_event_data *data);
+#endif //RDK_ONEWIFI
 int hostapd_set_authorized(struct hostapd_data *hapd,
 			   struct sta_info *sta, int authorized);
 int hostapd_set_sta_flags(struct hostapd_data *hapd, struct sta_info *sta);
@@ -98,6 +102,10 @@ int hostapd_drv_sta_deauth(struct hostapd_data *hapd,
 			      const u16 *csa_offs, size_t csa_offs_len);
 int hostapd_drv_sta_deauth(struct hostapd_data *hapd,
 			   const u8 *addr, int reason);
+#ifdef RDK_ONEWIFI
+int hostapd_drv_sta_notify_deauth(struct hostapd_data *hapd,
+			   const u8 *addr, int reason);
+#endif //RDK_ONEWIFI
 int hostapd_drv_sta_disassoc(struct hostapd_data *hapd,
 			     const u8 *addr, int reason);
 int hostapd_drv_send_action(struct hostapd_data *hapd, unsigned int freq,
--- a/source/hostap-2.9/src/ap/hostapd.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/hostapd.c	2024-11-25 17:53:42
@@ -341,7 +341,11 @@ static int hostapd_broadcast_wep_set(struct hostapd_da
 }
 
 
+#ifdef RDK_ONEWIFI
+void hostapd_free_hapd_data(struct hostapd_data *hapd)
+#else
 static void hostapd_free_hapd_data(struct hostapd_data *hapd)
+#endif
 {
 	os_free(hapd->probereq_cb);
 	hapd->probereq_cb = NULL;
@@ -604,7 +608,11 @@ static int hostapd_flush_old_stations(struct hostapd_d
 }
 
 
+#ifdef RDK_ONEWIFI
+void hostapd_bss_deinit_no_free(struct hostapd_data *hapd)
+#else
 static void hostapd_bss_deinit_no_free(struct hostapd_data *hapd)
+#endif
 {
 	hostapd_free_stas(hapd);
 	hostapd_flush_old_stations(hapd, WLAN_REASON_DEAUTH_LEAVING);
@@ -1079,7 +1087,11 @@ static int db_table_create_radius_attributes(sqlite3 *
  * initialized. Most of the modules that are initialized here will be
  * deinitialized in hostapd_cleanup().
  */
+#ifdef RDK_ONEWIFI
+int hostapd_setup_bss(struct hostapd_data *hapd, int first)
+#else
 static int hostapd_setup_bss(struct hostapd_data *hapd, int first)
+#endif
 {
 	struct hostapd_bss_config *conf = hapd->conf;
 	u8 ssid[SSID_MAX_LEN + 1];
@@ -3460,14 +3472,17 @@ int hostapd_switch_channel(struct hostapd_data *hapd,
 	}
 
 	ret = hostapd_fill_csa_settings(hapd, settings);
-	if (ret)
+	if (ret) {
+                wpa_printf(MSG_ERROR, "failed to fill csa settings, ret=%d", ret);
 		return ret;
+        }
 
 	ret = hostapd_drv_switch_channel(hapd, settings);
 	free_beacon_data(&settings->beacon_csa);
 	free_beacon_data(&settings->beacon_after);
 
 	if (ret) {
+                wpa_printf(MSG_ERROR, "failed to switch channel, ret=%d", ret);
 		/* if we failed, clean cs parameters */
 		hostapd_cleanup_cs_params(hapd);
 		return ret;
--- a/source/hostap-2.9/src/ap/hostapd.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/hostapd.h	2024-11-25 17:53:42
@@ -650,6 +650,12 @@ void hostapd_event_sta_opmode_changed(struct hostapd_d
 				      enum smps_mode smps_mode,
 				      enum chan_width chan_width, u8 rx_nss);
 
+#ifdef RDK_ONEWIFI
+int hostapd_setup_bss(struct hostapd_data *hapd, int first);
+void hostapd_free_hapd_data(struct hostapd_data *hapd);
+void hostapd_bss_deinit_no_free(struct hostapd_data *hapd);
+#endif /* RDK_ONEWIFI */
+
 #ifdef CONFIG_FST
 void fst_hostapd_fill_iface_obj(struct hostapd_data *hapd,
 				struct fst_wpa_obj *iface_obj);
--- a/source/hostap-2.9/src/ap/sta_info.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/sta_info.c	2024-11-25 17:53:42
@@ -377,6 +377,8 @@ void ap_free_sta(struct hostapd_data *hapd, struct sta
 
 	os_free(sta->ifname_wds);
 
+	os_free(sta->assoc_req);
+
 	os_free(sta);
 }
 
--- a/source/hostap-2.9/src/ap/sta_info.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/sta_info.h	2024-11-25 17:53:42
@@ -283,6 +283,8 @@ struct sta_info {
 	unsigned int airtime_weight;
 	struct os_reltime backlogged_until;
 #endif /* CONFIG_AIRTIME_POLICY */
+	u8 *assoc_req;
+	size_t assoc_req_len;
 };
 
 
--- a/source/hostap-2.9/src/ap/wpa_auth.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/wpa_auth.c	2024-11-25 17:53:42
@@ -97,9 +97,16 @@ static inline void wpa_auth_set_eapol(struct wpa_authe
 				      const u8 *addr, wpa_eapol_variable var,
 				      int value)
 {
+#ifdef RDK_ONEWIFI
+	if ((wpa_auth != NULL) && (wpa_auth->cb != NULL)) {
 	if (wpa_auth->cb->set_eapol)
 		wpa_auth->cb->set_eapol(wpa_auth->cb_ctx, addr, var, value);
-}
+	}
+#else
+	if (wpa_auth->cb->set_eapol)
+		wpa_auth->cb->set_eapol(wpa_auth->cb_ctx, addr, var, value);
+#endif //RDK_ONEWIFI
+}
 
 
 static inline int wpa_auth_get_eapol(struct wpa_authenticator *wpa_auth,
@@ -212,6 +219,12 @@ void wpa_auth_vlogger(struct wpa_authenticator *wpa_au
 	int maxlen;
 	va_list ap;
 
+#ifdef RDK_ONEWIFI
+	if (wpa_auth == NULL)
+                return;
+	if (wpa_auth->cb == NULL)
+                return;
+#endif //RDK_ONEWIFI
 	if (wpa_auth->cb->logger == NULL)
 		return;
 
--- a/source/hostap-2.9/src/ap/wpa_auth_glue.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/wpa_auth_glue.c	2024-11-25 17:53:42
@@ -191,16 +191,30 @@ static void hostapd_wpa_auth_psk_failure_report(void *ctx, const u8 *addr)
 static void hostapd_wpa_auth_set_eapol(void *ctx, const u8 *addr,
 				       wpa_eapol_variable var, int value)
 {
+#ifdef RDK_ONEWIFI
+	if ((ctx == NULL) || (addr == NULL))
+		return;
+#endif //RDK_ONEWIFI
 	struct hostapd_data *hapd = ctx;
 	struct sta_info *sta = ap_get_sta(hapd, addr);
 	if (sta == NULL)
 		return;
 	switch (var) {
 	case WPA_EAPOL_portEnabled:
-		ieee802_1x_notify_port_enabled(sta->eapol_sm, value);
+#ifdef RDK_ONEWIFI
+		if (sta->eapol_sm)
+			ieee802_1x_notify_port_enabled(sta->eapol_sm, value);
+#else
+			ieee802_1x_notify_port_enabled(sta->eapol_sm, value);
+#endif //RDK_ONEWIFI
 		break;
 	case WPA_EAPOL_portValid:
-		ieee802_1x_notify_port_valid(sta->eapol_sm, value);
+#ifdef RDK_ONEWIFI
+		if (sta->eapol_sm)
+			ieee802_1x_notify_port_valid(sta->eapol_sm, value);
+#else
+			ieee802_1x_notify_port_valid(sta->eapol_sm, value);
+#endif //RDK_ONEWIFI
 		break;
 	case WPA_EAPOL_authorized:
 		ieee802_1x_set_sta_authorized(hapd, sta, value);
@@ -214,9 +228,15 @@ static void hostapd_wpa_auth_set_eapol(void *ctx, const u8 *addr,
 			sta->eapol_sm->keyRun = value ? TRUE : FALSE;
 		break;
 	case WPA_EAPOL_keyAvailable:
+#ifdef RDK_ONEWIFI
+		if ((sta->eapol_sm != NULL) && (sta->eapol_sm->eap_if != NULL))
+			sta->eapol_sm->eap_if->eapKeyAvailable =
+				value ? TRUE : FALSE;
+#else
 		if (sta->eapol_sm)
 			sta->eapol_sm->eap_if->eapKeyAvailable =
 				value ? TRUE : FALSE;
+#endif //RDK_ONEWIFI
 		break;
 	case WPA_EAPOL_keyDone:
 		if (sta->eapol_sm)
--- a/source/hostap-2.9/src/ap/wps_hostapd.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/ap/wps_hostapd.c	2024-11-25 17:53:42
@@ -883,6 +883,10 @@ static void hostapd_wps_event_cb(void *ctx, enum wps_e
 	}
 	if (hapd->wps_event_cb)
 		hapd->wps_event_cb(hapd->wps_event_cb_ctx, event, data);
+
+#ifdef RDK_ONEWIFI
+	hostapd_drv_wps_event_notify_cb(hapd, event, data);
+#endif //RDK_ONEWIFI
 }
 
 
--- a/source/hostap-2.9/src/common/ieee802_11_common.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/common/ieee802_11_common.c	2024-11-25 17:53:42
@@ -929,7 +929,7 @@ static const char *const eu_op_class_cc[] = {
 	"AL", "AM", "AT", "AZ", "BA", "BE", "BG", "BY", "CH", "CY", "CZ", "DE",
 	"DK", "EE", "EL", "ES", "FI", "FR", "GE", "HR", "HU", "IE", "IS", "IT",
 	"LI", "LT", "LU", "LV", "MD", "ME", "MK", "MT", "NL", "NO", "PL", "PT",
-	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", NULL
+	"RO", "RS", "RU", "SE", "SI", "SK", "TR", "UA", "UK", "GB", NULL
 };
 
 static const char *const jp_op_class_cc[] = {
--- a/source/hostap-2.9/src/common/ieee802_11_defs.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/common/ieee802_11_defs.h	2024-11-25 17:53:42
@@ -2222,6 +2222,8 @@ struct ieee80211_he_mu_edca_parameter_set {
 #define HE_QOS_INFO_MORE_DATA_ACK ((u8) (BIT(7)))
 
 /* DPP Public Action frame identifiers - OUI_WFA */
+#ifndef DPP_OUI_TYPE
 #define DPP_OUI_TYPE 0x1A
+#endif
 
 #endif /* IEEE802_11_DEFS_H */
--- a/source/hostap-2.9/src/drivers/driver.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/drivers/driver.h	2024-11-25 17:53:42
@@ -2853,7 +2853,10 @@ struct wpa_driver_ops {
 	 */
 	int (*sta_deauth)(void *priv, const u8 *own_addr, const u8 *addr,
 			  u16 reason);
-
+#ifdef RDK_ONEWIFI
+	int (*sta_notify_deauth)(void *priv, const u8 *own_addr, const u8 *addr,
+			  u16 reason);
+#endif //RDK_ONEWIFI
 	/**
 	 * sta_disassoc - Disassociate a station (AP only)
 	 * @priv: Private driver interface data
@@ -3132,6 +3135,17 @@ struct wpa_driver_ops {
 	int (*set_ap_wps_ie)(void *priv, const struct wpabuf *beacon,
 			     const struct wpabuf *proberesp,
 			     const struct wpabuf *assocresp);
+
+#ifdef RDK_ONEWIFI
+	/**
+	 * wps_event_notify_cb - Notification of WPS event
+	 * @ctx:   wpa_supplicant context
+	 * @event: wps event type
+	 * @data:  wps event data
+	 * Returns: 0 on success, -1 on failure
+	 */
+	int (*wps_event_notify_cb)(void *ctx, unsigned int event, void *data);
+#endif //RDK_ONEWIFI
 
 	/**
 	 * set_supp_port - Set IEEE 802.1X Supplicant Port status
--- a/source/hostap-2.9/src/drivers/nl80211_copy.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/drivers/nl80211_copy.h	2024-11-25 17:53:42
@@ -2793,6 +2793,7 @@ enum nl80211_attrs {
 	NL80211_ATTR_AIRTIME_WEIGHT,
 	NL80211_ATTR_STA_TX_POWER_SETTING,
 	NL80211_ATTR_STA_TX_POWER,
+        NL80211_ATTR_RX_PHY_RATE_INFO = 317,
 
 	/* add attributes here, update the policy in nl80211.c */
 
--- a/source/hostap-2.9/src/utils/eloop.c	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/utils/eloop.c	2024-11-25 17:53:42
@@ -606,6 +606,59 @@ static void eloop_sock_table_dispatch(struct eloop_soc
 	}
 }
 
+#ifdef RDK_ONEWIFI
+int eloop_sock_table_read_set_fds(fd_set *fds)
+{
+	int i;
+
+	if (eloop.readers.table == NULL)
+		return 0;
+
+	for (i = 0; i < eloop.readers.count; i++) {
+		assert(eloop.readers.table[i].sock >= 0);
+		FD_SET(eloop.readers.table[i].sock, fds);
+	}
+	return 0;
+}
+
+int eloop_sock_table_read_get_biggest_fd(void)
+{
+	int i;
+	int sock_fd = 0;
+
+	if (eloop.readers.table == NULL)
+		return 0;
+
+	for (i = 0; i < eloop.readers.count; i++) {
+		assert(eloop.readers.table[i].sock >= 0);
+		if(sock_fd < eloop.readers.table[i].sock) {
+			sock_fd = eloop.readers.table[i].sock;
+		}
+	}
+	return sock_fd;
+}
+
+void eloop_sock_table_read_dispatch(fd_set *fds)
+{
+	int i;
+
+	if (eloop.readers.table == NULL)
+		return;
+
+	eloop.readers.changed = 0;
+	for (i = 0; i < eloop.readers.count; i++) {
+		if (FD_ISSET(eloop.readers.table[i].sock, fds)) {
+			eloop.readers.table[i].handler(eloop.readers.table[i].sock,
+						eloop.readers.table[i].eloop_data,
+						eloop.readers.table[i].user_data);
+			if (eloop.readers.changed)
+				break;
+		}
+	}
+}
+
+#endif //RDK_ONEWIFI
+
 #endif /* CONFIG_ELOOP_SELECT */
 
 
@@ -952,6 +1005,61 @@ int eloop_replenish_timeout(unsigned int req_secs, uns
 	return -1;
 }
 
+#ifdef RDK_ONEWIFI
+int eloop_get_timeout_ms(void)
+{
+	struct eloop_timeout *timeout;
+	struct os_reltime tv, now;
+	int timeout_ms = -1;
+
+	if(dl_list_empty(&eloop.timeout))
+	{
+		return timeout_ms;
+	}
+
+	timeout = dl_list_first(&eloop.timeout, struct eloop_timeout,
+					list);
+	if (timeout) {
+		os_get_reltime(&now);
+		if (os_reltime_before(&now, &timeout->time))
+			os_reltime_sub(&timeout->time, &now, &tv);
+		else
+			tv.sec = tv.usec = 0;
+		timeout_ms = tv.sec * 1000 + tv.usec / 1000;
+	}
+	return timeout_ms;
+}
+
+int eloop_timeout_run(void)
+{
+	struct eloop_timeout *timeout;
+	struct os_reltime tv, now;
+
+	if(dl_list_empty(&eloop.timeout))
+	{
+		return 0;
+	}
+
+	/* check if some registered timeouts have occurred */
+	timeout = dl_list_first(&eloop.timeout, struct eloop_timeout,
+				list);
+	if (timeout) {
+		os_get_reltime(&now);
+		if (!os_reltime_before(&now, &timeout->time)) {
+			void *eloop_data = timeout->eloop_data;
+			void *user_data = timeout->user_data;
+			eloop_timeout_handler handler =
+				timeout->handler;
+			eloop_remove_timeout(timeout);
+                        printf("Executing callback\n");
+			handler(eloop_data, user_data);
+		}
+
+	}
+	return 0;
+}
+
+#endif //RDK_ONEWIFI
 
 #ifndef CONFIG_NATIVE_WINDOWS
 static void eloop_handle_alarm(int sig)
--- a/source/hostap-2.9/src/utils/eloop.h	2019-08-07 06:25:25
+++ b/source/hostap-2.9/src/utils/eloop.h	2024-11-25 17:53:42
@@ -128,6 +128,12 @@ void eloop_unregister_sock(int sock, eloop_event_type 
  */
 void eloop_unregister_sock(int sock, eloop_event_type type);
 
+#ifdef RDK_ONEWIFI
+int eloop_sock_table_read_set_fds(fd_set *fds);
+int eloop_sock_table_read_get_biggest_fd(void);
+void eloop_sock_table_read_dispatch(fd_set *fds);
+#endif //RDK_ONEWIFI
+
 /**
  * eloop_register_event - Register handler for generic events
  * @event: Event to wait (eloop implementation specific)
@@ -255,6 +261,11 @@ int eloop_replenish_timeout(unsigned int req_secs, uns
 int eloop_replenish_timeout(unsigned int req_secs, unsigned int req_usecs,
 			    eloop_timeout_handler handler, void *eloop_data,
 			    void *user_data);
+
+#ifdef RDK_ONEWIFI
+int eloop_get_timeout_ms(void);
+int eloop_timeout_run(void);
+#endif //RDK_ONEWIFI
 
 /**
  * eloop_register_signal - Register handler for signals
